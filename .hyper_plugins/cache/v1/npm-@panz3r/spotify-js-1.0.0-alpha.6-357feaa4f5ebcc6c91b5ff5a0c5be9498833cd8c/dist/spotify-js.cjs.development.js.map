{"version":3,"file":"spotify-js.cjs.development.js","sources":["../src/spotify/spotifyDarwin.ts","../src/spotify/spotifyDefault.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/spotify/spotifyLinux.ts","../src/index.ts"],"sourcesContent":["import spotify from 'spotify-node-applescript';\n\nimport {\n  SpotifyAction,\n  SpotifyService,\n  SpotifyState,\n  SpotifyTrack,\n} from '../index';\n\nclass SpotifyDarwin implements SpotifyService {\n  public supportedActions: SpotifyAction[] = [\n    'togglePlayPause',\n    'previousTrack',\n    'nextTrack',\n  ];\n\n  public isRunning(): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      spotify.isRunning((err, isRunning) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(isRunning);\n        }\n      });\n    });\n  }\n\n  public getState(): Promise<SpotifyState> {\n    return new Promise((resolve, reject) => {\n      spotify.getState((err, state) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve({ state: state.state });\n        }\n      });\n    });\n  }\n\n  public getTrack(): Promise<SpotifyTrack> {\n    return new Promise((resolve, reject) => {\n      spotify.getTrack((err, track) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(track);\n        }\n      });\n    });\n  }\n\n  public async togglePlayPause(): Promise<SpotifyState> {\n    await new Promise(resolve => {\n      spotify.playPause(resolve);\n    });\n\n    return this.getState();\n  }\n\n  public async previousTrack(): Promise<SpotifyTrack> {\n    await new Promise(resolve => {\n      spotify.previous(resolve);\n    });\n\n    return this.getTrack();\n  }\n\n  public async nextTrack(): Promise<SpotifyTrack> {\n    await new Promise(resolve => {\n      spotify.next(resolve);\n    });\n\n    return this.getTrack();\n  }\n}\n\nexport default SpotifyDarwin;\n","import {\n  SpotifyAction,\n  SpotifyService,\n  SpotifyState,\n  SpotifyTrack,\n} from '../index';\n\nclass SpotifyDefault implements SpotifyService {\n  public supportedActions: SpotifyAction[] = [];\n\n  constructor() {\n    console.error('Unsupported OS');\n  }\n\n  public isRunning(): Promise<boolean> {\n    return Promise.reject('Not implemented');\n  }\n\n  public getState(): Promise<SpotifyState> {\n    return Promise.reject('Not implemented');\n  }\n\n  public getTrack(): Promise<SpotifyTrack> {\n    return Promise.reject('Not implemented');\n  }\n\n  public async togglePlayPause(): Promise<SpotifyState> {\n    return Promise.reject('Not implemented');\n  }\n\n  public async previousTrack(): Promise<SpotifyTrack> {\n    return Promise.reject('Not implemented');\n  }\n\n  public async nextTrack(): Promise<SpotifyTrack> {\n    return Promise.reject('Not implemented');\n  }\n}\n\nexport default SpotifyDefault;\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import dbus from 'dbus-next';\nimport { isArray, join, last, reduce, split, toLower } from 'lodash';\n\n// Enable BigInt compatibility mode - https://www.npmjs.com/package/dbus-next#node-compatibility\ndbus.setBigIntCompat(true);\n\nimport {\n  SpotifyAction,\n  SpotifyPlaybackState,\n  SpotifyService,\n  SpotifyState,\n  SpotifyTrack,\n} from '../index';\n\ninterface PlayerInterface extends dbus.ClientInterface {\n  Next(): Promise<void>;\n  PlayPause(): Promise<void>;\n  Previous(): Promise<void>;\n}\n\ninterface PropertiesInterface extends dbus.ClientInterface {\n  Get(interfaceName: string, propertyName: string): Promise<dbus.Variant>;\n  Get<T>(interfaceName: string, propertyName: string): Promise<dbus.Variant<T>>;\n}\n\ntype PlayerPlaybackState = 'Playing' | 'Paused' | 'Stopped';\n\ninterface MetadataVariant {\n  [key: string]: dbus.Variant<any>;\n}\n\ninterface SpotifyInterfacesRes {\n  player: PlayerInterface;\n  properties: PropertiesInterface;\n}\n\nclass SpotifyLinux implements SpotifyService {\n  private _player?: PlayerInterface;\n\n  private _properties?: PropertiesInterface;\n\n  public supportedActions: SpotifyAction[] = [\n    'togglePlayPause',\n    'previousTrack',\n    'nextTrack',\n  ];\n\n  constructor() {\n    this._getInterfaces();\n  }\n\n  public async isRunning(): Promise<boolean> {\n    try {\n      const { player, properties } = await this._getInterfaces();\n      return !!player && !!properties;\n    } catch {\n      return false;\n    }\n  }\n\n  public async getState(): Promise<SpotifyState> {\n    const { properties } = await this._getInterfaces();\n\n    const state = await properties.Get<PlayerPlaybackState>(\n      'org.mpris.MediaPlayer2.Player',\n      'PlaybackStatus'\n    );\n\n    return {\n      state: toLower(state.value) as SpotifyPlaybackState,\n    };\n  }\n\n  public async getTrack(): Promise<SpotifyTrack> {\n    const { properties } = await this._getInterfaces();\n\n    const metadata = await properties.Get<MetadataVariant>(\n      'org.mpris.MediaPlayer2.Player',\n      'Metadata'\n    );\n\n    const trackMeta = reduce(\n      metadata.value,\n      (dst, meta, k) => {\n        const key = last(split(k, ':'));\n        if (key) {\n          const { value } = meta;\n          dst[key] = isArray(value) ? join(value, ' & ') : value;\n        }\n\n        return dst;\n      },\n      {} as SpotifyTrack\n    );\n\n    trackMeta.name = trackMeta.title;\n\n    return trackMeta;\n  }\n\n  public async togglePlayPause(): Promise<SpotifyState> {\n    const { player } = await this._getInterfaces();\n\n    await player.PlayPause();\n\n    return this.getState();\n  }\n\n  public async previousTrack(): Promise<SpotifyTrack> {\n    const { player } = await this._getInterfaces();\n\n    await player.Previous();\n\n    return this.getTrack();\n  }\n\n  public async nextTrack(): Promise<SpotifyTrack> {\n    const { player } = await this._getInterfaces();\n\n    await player.Next();\n\n    return this.getTrack();\n  }\n\n  // Internal methods\n  private async _getInterfaces(): Promise<SpotifyInterfacesRes> {\n    if (!this._player || !this._properties) {\n      return dbus\n        .sessionBus()\n        .getProxyObject(\n          'org.mpris.MediaPlayer2.spotify',\n          '/org/mpris/MediaPlayer2'\n        )\n        .then(spotifyProxy => {\n          this._player = spotifyProxy.getInterface<PlayerInterface>(\n            'org.mpris.MediaPlayer2.Player'\n          );\n          this._properties = spotifyProxy.getInterface<PropertiesInterface>(\n            'org.freedesktop.DBus.Properties'\n          );\n\n          return {\n            player: this._player,\n            properties: this._properties,\n          };\n        })\n        .catch(err => {\n          throw err;\n        });\n    }\n\n    return {\n      player: this._player,\n      properties: this._properties,\n    };\n  }\n}\n\nexport default SpotifyLinux;\n","import opn from 'open';\nimport os from 'os';\n\nimport { SpotifyDarwin, SpotifyDefault, SpotifyLinux } from './spotify';\n\nexport type SpotifyAction = 'togglePlayPause' | 'previousTrack' | 'nextTrack';\n\nexport type SpotifyPlaybackState = 'playing' | 'paused' | 'stopped';\n\nexport interface SpotifyState {\n  state: SpotifyPlaybackState;\n}\n\nexport interface SpotifyTrack {\n  name: string;\n  [key: string]: any;\n}\n\nexport interface SpotifyService {\n  supportedActions: SpotifyAction[];\n\n  isRunning(): Promise<boolean>;\n\n  getState(): Promise<SpotifyState>;\n\n  getTrack(): Promise<SpotifyTrack>;\n\n  togglePlayPause(): Promise<SpotifyState>;\n\n  previousTrack(): Promise<SpotifyTrack>;\n\n  nextTrack(): Promise<SpotifyTrack>;\n}\n\nexport class SpotifyManager {\n  private spotifySrv: SpotifyService;\n\n  constructor() {\n    switch (os.platform()) {\n      case 'darwin':\n        this.spotifySrv = new SpotifyDarwin();\n        break;\n\n      case 'linux':\n        this.spotifySrv = new SpotifyLinux();\n        break;\n\n      default:\n        this.spotifySrv = new SpotifyDefault();\n    }\n  }\n\n  launchSpotify() {\n    return opn('spotify://', { url: true });\n  }\n\n  supportedActions() {\n    return this.spotifySrv.supportedActions;\n  }\n\n  isRunning() {\n    return this.spotifySrv.isRunning();\n  }\n\n  getState() {\n    return this.spotifySrv.getState();\n  }\n\n  togglePlayPause() {\n    return this.spotifySrv.togglePlayPause();\n  }\n\n  previousTrack() {\n    return this.spotifySrv.previousTrack();\n  }\n\n  nextTrack() {\n    return this.spotifySrv.nextTrack();\n  }\n\n  getTrack() {\n    return this.spotifySrv.getTrack();\n  }\n}\n"],"names":["SpotifyDarwin","isRunning","Promise","resolve","reject","spotify","err","getState","state","getTrack","track","togglePlayPause","playPause","previousTrack","previous","nextTrack","next","SpotifyDefault","console","error","dbus","setBigIntCompat","SpotifyLinux","_getInterfaces","player","properties","Get","toLower","value","metadata","trackMeta","reduce","dst","meta","k","key","last","split","isArray","join","name","title","PlayPause","Previous","Next","_player","_properties","sessionBus","getProxyObject","then","spotifyProxy","getInterface","SpotifyManager","os","platform","spotifySrv","launchSpotify","opn","url","supportedActions"],"mappings":"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"}